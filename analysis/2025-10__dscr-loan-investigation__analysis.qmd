---
title: "dscr-loan-investigation"
format: html
editor: visual
---

# Setup

```{r}
# turn off scientific notation
options(scipen = 999)

# load proprietary BB Functions
source('functions/fxns.R')

# load Packages
library(tidyverse)
library(sf)
library(janitor)
library(mapview)
library(tidygeocoder)
library(crsuggest)
library(kableExtra)
```

# Load data

-   Real Property data obtained from [Open Baltimore]()

-   Permitting data obtained from [Open Baltimore]()

-   Vacant building data obtained from [Open Baltimore]()

-   Water Billing data obtained via a proprietary Python script that pulls html from [Baltimore' water billl payment portal](). The code for that script is not included in this repository. The scraper couldn't parse the addresses for three of the properties in this portfolio; After re-geocoding the properties I manually filled in whether or not bills at those three properties had been paid this year.

-   Home Mortgage data obtained from the U.S. Consumer Financial Protection Bureau's HMDA data browser. The dataset loaded below is created in `utils.R`, included in the `analysis` folder of this repository. Should you wish to re-generate this file from scratch, please please run `utils.R` in the `analysis` folder. Download raw data from [this s3 bucket](http://example.com) and place the `hmda` folder into `data/raw/`, and the code should work for you.

```{r}

# for property analysis, including permitting and water billing 
real_properties <- clean_df(st_read("data/raw/Real_Property_Information_0828.geojson")) %>% 
  st_make_valid() 

permits_sf <- clean_df(st_read("data/raw/permits_0904.geojson"))

vbn <- clean_df(vroom("data/raw/vbn_current_0904.csv"))

# this is the csv generated by my water bill scraper! 
water_bills <- clean_df(vroom("data/output/parsed_water_bills.csv"))

# for hmda analysis 
## this is the dataset created by running `utils.R`. See the README for more info.
## If you would like to re-create this dataset, please run `utils.R` in the `analysis` folder. 
## The raw data has been uploaded to [a public s3 bucket](http://example.com) for your convenience. 
hmda_all <- read_csv("data/output/hmda_18_24_cln.csv")

```

# Preamble: Clean data

This is the baseline version of each dataset used in the analysis code chunks below.

```{r}

# clean real property data
real_properties_cln <- real_properties %>% 
  mutate(saledate = as.Date(as.character(saledate), format = "%m%d%Y"), ldate = as.Date(as.character(ldate), format = "%m%d%Y"))

# clean permit data 
permits_cln <- permits_sf %>% 
  mutate(
    # dates in date format
    issued_date = as_date(issued_date),
    expiration_date = as_date(expiration_date),
    month_year = my(paste0(month(issued_date),"-", year(issued_date))),
    year = year(issued_date),
    month = month(issued_date),
    day = day(issued_date),
    ) %>% 
  # no temporary or unfinished permits
  filter(!str_detect(case_number, "tmp|btemp")) %>%
  # no zoning appeal permits 
  filter(!str_detect(case_number, "bmz")) %>%
  # extract permit type from beginning of case num
  mutate(code_type = str_extract(case_number, "[^-0-9]*"))

# clean hmda data 
hmda_all_cln <- hmda_all %>% 
  mutate(no_dti = is.na(debt_to_income_ratio)|debt_to_income_ratio == "",
         no_income = is.na(income)| income == "") %>% 
  mutate(is_dscr = case_when(
      # no dti and no income
      no_dti == T & 
      no_income == T &
      # loan term 30-40 years 
      loan_term >= 360 &
      loan_term <= 480 &
      # no GSE purchaser 
      purchaser_type %notin% c(1,2,3,4) &
      # business or commercial purpose
      business_or_commercial_purpose == 1 ~ "dscr",
    TRUE ~ "other"
  )) %>%
  mutate(no_msa = case_when(is.na(derived_msa_md) ~ "no_msa",
                            derived_msa_md == "" ~ "no_msa", 
                            derived_msa_md == "99999" ~ "no_msa",
                            TRUE ~ "msa")) 
# clean scraped water billing data 
water_bills_cln <- water_bills %>%
  # make dates real dates 
  mutate(current_bill_date = mdy(current_bill_date),
         current_read_date = mdy(current_read_date),
         last_pay_date = mdy(last_pay_date),
         previous_read_date = mdy(previous_read_date),
         penalty_date = mdy(penalty_date)) %>%
  # select relevant columns 
  select(account_number,current_balance, current_bill_amount, current_bill_date, current_read_date, customername, last_pay_amount, last_pay_date, penalty_date, previous_balance, service_address) %>%
  # My scraper picked up a property that is not within our portfolio; filter it out
  filter(service_address != "1202 e lafayette ave")

```

# Chapter 1: Permit and water billing data

**Sentence 1: *Out of the 704 homes The Banner identified as connected to the New York portfolio, more than 70% haven’t had a single renovation or construction permit pulled since at least 2019, according to a Banner analysis of the city’s permitting data.***

```{r}
# These strings are the names or partial names of LLC's The Banner identified as belonging to two of the New York investors 
gold_lst <- c("zahav", "kesef venture", "gelt ", "levy ven", "gold ven", "egbe v", "b&h", "kasef")

gold_pattern <- paste0("(?i)", paste(gold_lst, collapse = "|"))

# This is a list of blocklots associated with properties that no longer appear under the 
# Gold name because they were sold at foreclosure
blocklot_lst <- c("3407 095", "4154 022", "1661 054", "1655 012", "2748b007")


gold_props <- real_properties_cln %>% 
  filter(if_any(owner_1, ~ str_detect(.x, gold_pattern))|blocklot %in% blocklot_lst) %>%
  mutate(owning_entity = "gold")

# these are properties owned by deera LLC, another company linked to the New York investors 
deera_props <- real_properties_cln %>% 
  filter(str_detect(owner_1, "deera")) %>%
  mutate(owning_entity = "deera")

# bind for portfolio of 704
spring_valley_portfolio <- bind_rows(gold_props, deera_props)

```

take a look at properties

```{r}

mapview(spring_valley_portfolio, 
        col.regions = "red",
        cex = 10,
        color = "darkred",      # Different border color
        lwd = 2,               # Border thickness
        alpha.regions = 0.8,
        label = gold_props$blocklot)

```

join in vacant building data and permitting data

```{r}

svp_jn_bl <- spring_valley_portfolio %>% left_join(vbn, by = "blocklot")

# pivoting permitting data longer, so every blocklot
# has a single row 
permits_lng <- permits_cln %>%
  # joining on blocklot, not spatial
  st_drop_geometry() %>%
  group_by(blocklot, code_type) %>% 
  count() %>% 
  pivot_wider(
    names_from = code_type, 
    values_from = n
  ) 

# join permit data to spring valley protfolio data by blocklot
svp_props_main <- left_join(svp_jn_bl, permits_lng, by = "blocklot") %>% 
  mutate(has_permit = if_any(use:bdem, ~ !is.na(.)))

share_of_properties_with_permit <- mean(svp_props_main$has_permit)

print(paste0(round(share_of_properties_with_permit*100),"% of the properties in the Spring Valley portfolio have pulled construction, demolition, renovation or land use permits since at least 2019."))

```

**Sentence 2: *More than half haven’t paid their water bills in a year or longer, a sign that many of the homes may be vacant.***

```{r}

# start by trimming down the giant svp dataframeto just useful columns 
svp_props_jn <- svp_props_main %>% 
   select(objectid.x, blocklot, saledate, owner_1, fulladdr, bldg_no, st_name, stdirpre, st_type, neighbor, mailtoadd, vacind, owning_entity, objectid.y, notice_num, date_notice, nt, use:bdem, has_permit)

# create parsed address columns that match with the parsed address pieces in the real-property based data 
water_bills_cln_2 <- water_bills_cln %>%
  mutate(clean_address = str_squish(service_address),
         bldg_no = str_extract(clean_address, "^\\d+"),
         st_name = str_remove(clean_address, "^\\d+"),
         st_dir_pre = str_extract(clean_address, "\\s([nesw])\\s"),
         st_name = str_remove(st_name, "\\s([nesw])\\s"),
         fractions = str_extract(clean_address, "\\d+/\\d+"),
         st_name = str_remove(st_name, "\\d+/\\d+"),
         st_type = str_extract(clean_address, "\\w+$"),
         st_name = str_remove(st_name, "\\w+$"),
         st_name = str_squish(st_name)) %>% 
mutate(bldg_no = as.numeric(bldg_no)) %>%
  # fix a couple of odd addresses 
  mutate(st_name = case_when(
    clean_address == "2703 the alameda" ~ "the alameda",
    clean_address == "1083 ellicott dr" ~ "ellicott driveway",
    TRUE ~ st_name
  ))

# final dataframe 
svp_all <- svp_props_jn %>%
  mutate(st_name = str_squish(st_name)) %>% 
  left_join(water_bills_cln_2, by = c("bldg_no", "st_name"))

# create a boolean to tell us if the water bill has been paid since 2024
svp_all_final <- svp_all %>%
  mutate(
    last_pay_year = year(last_pay_date),
    no_bill_2024 = last_pay_year <= 2024,
  ) %>% 
  # add in designations for the three properties we checked by hand
  mutate(no_bill_2024 = case_when(objectid.x == "77389" ~ T, 
                                  objectid.x == "4407" ~ F,
                                  objectid.x == "206447" ~ T,
                                  T ~ no_bill_2024
         ), 
         no_last_pay_date = is.na(no_bill_2024)) %>% 
  mutate(no_bill_pay_or_last_date = no_bill_2024 | no_last_pay_date)

no_bill_paid_since_24 <- svp_all_final %>% filter(no_bill_2024 == T) %>% nrow()

total_props <- nrow(svp_all_final)

share_unpaid <- (no_bill_paid_since_24/total_props)*100

paste0(round(share_unpaid),"% of properties in the portfolio had a last pay date from 2024 or before. That's not including more than 100 properties that had no last pay date.")

```

# Chapter 2: HMDA analysis

**Sentence 3: *DSCR loans went from contributing roughly 10% of loan dollars backing single-family rental properties in Baltimore in 2019 to about 40%, more than \$150 million, last year, according to a Banner analysis of national home mortgage data.***

```{r}

bmore_city_yoy <- hmda_all_cln %>%
  # doing this analysis from 2019 forward to look over a 5 year period
  # and a 5 percentage point gap we couldn't explain between DSCR dollar volume 
  # and loan volume in 2018 gave The Banner pause. 
  filter(activity_year != 2018) %>% 
  # filter to just loans issued in the city of Baltimore 
  filter(county_code == "24510") %>% 
  group_by(activity_year, is_dscr) %>%
  summarise(number_loans = n(),
            dollars_loans = sum(loan_amount)) %>% 
  pivot_wider(
    names_from = is_dscr,
    values_from = c(number_loans, dollars_loans), 
    names_sep = "_"
  ) %>%
  mutate(total_loans = number_loans_dscr + number_loans_other,
         total_loan_dollars = dollars_loans_dscr + dollars_loans_other, 
         pct_loans_dscr = (number_loans_dscr/total_loans)*100,
         pct_dollar_dscr = (dollars_loans_dscr/total_loan_dollars)*100)

kbl(bmore_city_yoy, caption = "DSCR lending in Baltimore, year-over-year") %>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)

```

**Sentence 4: *One of the nation’s major DSCR lenders is Dominion Financial, a private mortgage lender headquartered in Downtown Baltimore that finances deals around the country.***

**and**

**Sentence 5: *But the buyers turned to other lenders, documents show, including RCN Capital, Deephaven Mortgage and Loan Funder, LLC — some of the biggest providers of DSCR loans in the U.S.***

```{r}

# df of just nationwide dscr loans 
dscr_nationwide <-
  # we start by filtering just to dscr loans
  # all first lien closed-end credit loans issued to secure investment properties between 1-4 units 
  hmda_all_cln %>% 
  filter(is_dscr == "dscr")

# Uncomment the optional filter to just 2024 to see results that match our chart
# names of LEIs here all come from https://ffiec.cfpb.gov/data-browser/data/2024?category=states
# Note that because the analysis looks across all years, some leis on this list 
# Don't appear in 2024. 
top_dscr_lenders <- 
  dscr_nationwide %>% 
  #filter(activity_year == 2024) %>% 
  mutate(lender_name = case_when(
    lei == "5493005PD34O8ZT7QT17" ~ "Bpl mortgage",
    lei == "549300C8GOC4OYUV0Z32" ~ "Dominion financial",
    lei == "254900JXCS783CPF1D02" ~ "RCN capital",
    lei == "254900RUCO27MVGTO768" ~ "Loan funder LLC",
    lei == "549300Y5Y88FQLI7VE83" ~ "Deephaven mortgage",
    lei == "5493006VAGP3GQ8FJT49" ~ "Kiavi Funding, INC.", 
    lei == "549300TA4MQM8WN2XG31" ~ "Velocity Commercial Capital, LLC",
    lei == "549300O6Z0I6KYMESL47" ~ "Amwest funding corp.", 
    lei == "F28JOQ8OBWCFUYM0UX93" ~ "East West Bank",
    lei == "5493006HWKBRUZIDS752" ~ "Civic financial services LLC",
    lei == "254900FBWEZ3YUPOBN33" ~ "Lima one capital, LLC",
    lei == "54930091JQKCU3Z6IP44" ~ "LendingOne LLC",
    lei == "YWC0TIKBQM2JV8L4IV08" ~ "First Republic Bank",
    lei == "5493001IKIPQ6O5UGV92" ~ "Finance of america commercial LLC",
    lei == "549300J7I82PNDVU8H22" ~ "OCMBC, INC",
    lei == "2549005SIVTHG14U2905" ~ "A&D Mortgage LLC",
    lei == "254900GXB4AVD3FPHO33" ~ "Investor mortgage finance LLC",
    lei == "549300RA3E0BUFO7YZ21" ~ "Hometown equity mortgage LLC",
    lei == "549300VZVN841I2ILS84" ~ "Crosscountry mortgage, INC."
  )) %>% 
  group_by(lei, lender_name) %>% 
  summarise(number_dscr_loans = n(), 
            dscr_dollars = sum(loan_amount)) %>%
  arrange(desc(number_dscr_loans)) %>% 
  head(n = 15)

kbl(top_dscr_lenders, caption = "Top 15 DSCR Lenders, 2018-2024") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)

# Dominion financial is in the top 15
kbl(top_dscr_lenders %>% filter(lender_name == "Dominion financial")) %>%
  kable_styling(bootstrap_options = "striped", full_width = FALSE)

```
